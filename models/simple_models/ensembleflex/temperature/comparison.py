# /home/s_felix/ensembleflex/ensembleflex/temperature/comparison.py
"""
Temperature Analysis Utilities for EnsembleFlex.

"""

import os
import logging
from typing import Dict, List, Any, Optional, Union

import numpy as np
import pandas as pd
from scipy import stats

logger = logging.getLogger(__name__)

# --- Potentially Reusable (but less central) Functions ---

def calculate_prediction_temperature_correlations(
    combined_pred_df: pd.DataFrame,
    temperatures: List[Union[int, float]],
    model_name: str
) -> Optional[pd.DataFrame]:
    """
    Calculates correlations between a single model's *predictions* made at
    different input temperatures.

    Requires input DataFrame generated by the `compare-temperatures` CLI command.

    Args:
        combined_pred_df: DataFrame with columns like 'domain_id', 'resid',
                          'temperature', 'predicted_rmsf'.
        temperatures: List of numeric temperatures present in the DataFrame.
        model_name: Name of the model (used for logging/context).

    Returns:
        DataFrame correlation matrix or None if calculation fails.
    """
    logger.info(f"Calculating correlations between predictions at different input temperatures for model '{model_name}'.")
    if combined_pred_df.empty or 'predicted_rmsf' not in combined_pred_df.columns or 'temperature' not in combined_pred_df.columns:
        logger.warning("Input DataFrame is empty or missing required columns ('predicted_rmsf', 'temperature').")
        return None

    # Pivot the table to get predictions per temp as columns
    try:
        pivot_df = combined_pred_df.pivot_table(
            index=['domain_id', 'resid'],
            columns='temperature',
            values='predicted_rmsf'
        )
    except Exception as e:
        logger.error(f"Failed to pivot DataFrame for correlation calculation: {e}")
        return None

    # Ensure columns match the requested temperatures and are numeric
    valid_temp_cols = sorted([t for t in temperatures if t in pivot_df.columns])

    if len(valid_temp_cols) < 2:
        logger.warning("Need at least two valid temperature columns in pivoted data to calculate correlations.")
        return None

    logger.debug(f"Calculating correlations for temperature columns: {valid_temp_cols}")

    try:
        # Calculate correlation matrix, handling potential NaNs
        # Use pairwise correlation to handle missing values gracefully
        corr_matrix = pivot_df[valid_temp_cols].corr(method='pearson', min_periods=10) # require some overlap
    except Exception as e:
        logger.error(f"Failed to calculate correlation matrix: {e}")
        return None

    # Format as DataFrame with string indices/columns for consistency
    corr_df = pd.DataFrame(corr_matrix, index=[str(t) for t in valid_temp_cols], columns=[str(t) for t in valid_temp_cols])
    # Reindex to match the full list of input temperatures if needed (will introduce NaNs)
    # corr_df = corr_df.reindex(index=[str(t) for t in temperatures], columns=[str(t) for t in temperatures])

    return corr_df


logger.info("ensembleflex temperature.comparison module loaded (simplified version).")